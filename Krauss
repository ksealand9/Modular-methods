// Input: Elliptic curve E defined over Q, and a prime p
// Output: Trace of Frobenius a_p


// Define the prime p
p := 23;

q := NextPrime(p);  // Start with the first prime greater than p

while (q mod p ne 1) do
    q := NextPrime(q);  // Check the next prime
end while;

// You want this to be \leq p^2/4
q;

solutions:=[];

mu := [z : z in [1..q-1] | (z^2) mod q eq 1];  // n = 2 for this case

// Iterate over possible values of a and b mod q
for a in [0..q-1] do
    for b in [0..q-1] do
        // Compute the left-hand side of the equation mod q
        lhs := (a^4 + 3*b^2) mod q;
        // Iterate over the roots of unity
        for z in mu do
            rhs := (z^2) mod q;
            // Check if both sides are equal mod q
            if lhs eq rhs then
                Append(~solutions, <a, b, z>);
            end if;
        end for;
    end for;
end for;

// Output all solutions
//solutions;

// Define an elliptic curve E
for i in [1..#solutions] do
    E := EllipticCurve([0, 0, 4*solutions[1][1], 2*solutions[1][3], 0]);
    TraceOfFrobenius(E,q);
end for;

// Check if p is a good prime (i.e., E has good reduction at p)
N := Conductor(E);
if p mod N eq 0 then
    // E has bad reduction at p
    bad_red := LocalInformation(E, p);
    if bad_red[1] eq "additive" then
        a_p := 0; // a_p = 0 for additive reduction
    elif bad_red[1] eq "split multiplicative" or bad_red[1] eq "non-split multiplicative" then
        a_p := 1; // a_p = Â±1 for multiplicative reduction
    end if;
else
    // E has good reduction at p, compute the number of points modulo p
    a_p := TraceOfFrobenius(E, p);
end if;

// Output the result
a_p;
